{"id": "task_1", "instruction": "Write a Python script that uses a for loop to print numbers 1 to 10.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that uses a for loop to print numbers 1 to 10.\nfor i in range(1, 11):\n    print(i)"}]}
{"id": "task_2", "instruction": "Implement a while loop that asks for user input and keeps looping until the user types 'stop'.", "instances": [{"input": "", "output": "", "replit_code_output": "Implement a while loop that asks for user input and keeps looping until the user types 'stop'.\nwhile True:\n    user_input = input(\"Please enter some text: \")\n    if user_input == 'stop':\n        break"}]}
{"id": "task_3", "instruction": "Write a Python function that takes two integers as arguments, and returns 'equal' if they are equal, 'greater' if the first is greater, and 'lesser' if the second is greater.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python function that takes two integers as arguments, and returns 'equal' if they are equal, 'greater' if the first is greater, and 'lesser' if the second is greater."}]}
{"id": "task_4", "instruction": "Write a Python generator that generates Fibonacci numbers.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python generator that generates Fibonacci numbers.\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor fib in fibonacci(10):\n    print(fib)"}]}
{"id": "task_5", "instruction": "Explain the difference between an iterator and a generator in Python. Provide examples.", "instances": [{"input": "", "output": "", "replit_code_output": "Explain the difference between an iterator and a generator in Python. Provide examples."}]}
{"id": "task_6", "instruction": "Write a Python function that takes a list of numbers as an argument and returns a list of the squares of those numbers.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python function that takes a list of numbers as an argument and returns a list of the squares of those numbers."}]}
{"id": "task_7", "instruction": "Given a list a = [1, 2, 3, 4, 5], write a Python script to reverse this list without using the built-in reverse() function.", "instances": [{"input": "", "output": "", "replit_code_output": "Given a list a = [1, 2, 3, 4, 5], write a Python script to reverse this list without using the built-in reverse() function."}]}
{"id": "task_8", "instruction": "Given a dictionary d = {'a': 1, 'b': 2, 'c': 3}, write a Python script to swap keys and values in the dictionary (result should be {1: 'a', 2: 'b', 3: 'c'}).", "instances": [{"input": "", "output": "", "replit_code_output": "Given a dictionary d = {'a': 1, 'b': 2, 'c': 3}, write a Python script to swap keys and values in the dictionary (result should be {1: 'a', 2: 'b', 3: 'c'})."}]}
{"id": "task_9", "instruction": "Write a Python script that takes two sets s1 and s2 and prints their intersection, union, and difference.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that takes two sets s1 and s2 and prints their intersection, union, and difference."}]}
{"id": "task_10", "instruction": "Write a Python function that accepts a list of words, and returns a dictionary where keys are the words and values are the frequencies of the words in the list. Use a for loop, if clause, and dictionary in your solution.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python function that accepts a list of words, and returns a dictionary where keys are the words and values are the frequencies of the words in the list. Use a for loop, if clause, and dictionary in your solution."}]}
{"id": "task_11", "instruction": "Write a Python script that counts the frequency of each word in a text", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that counts the frequency of each word in a text."}]}
{"id": "task_12", "instruction": "Explain the following Python script which counts the frequency of words in a text.", "instances": [{"input": "def word_frequency(text):\n    words = text.split()\n    frequency_dict = {}\n    for word in words:\n        if word not in frequency_dict:\n            frequency_dict[word] = 0\n        frequency_dict[word] += 1\n    for word, frequency in frequency_dict.items():\n        print(f'{word}: {frequency}')\n\ntext = 'Hello world! This is a simple simple test text text for the word frequency function.'\nword_frequency(text)", "output": "", "replit_code_output": "Explain the following Python script which counts the frequency of words in a text.def word_frequency(text):\n    words = text.split()\n    frequency_dict = {}\n    for word in words:\n        if word not in frequency_dict:\n            frequency_dict[word] = 0\n        frequency_dict[word] += 1\n    for word, frequency in frequency_dict.items():\n        print(f'{word}: {frequency}')\n\ntext = 'Hello world! This is a simple simple test text text for the word frequency function.'\nword_frequency(text)"}]}
{"id": "task_13", "instruction": "Write a Python script that solves the FizzBuzz problem.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that solves the FizzBuzz problem."}]}
{"id": "task_14", "instruction": "Explain the following Python script which solves the FizzBuzz problem.", "instances": [{"input": "for i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)", "output": "", "replit_code_output": "Explain the following Python script which solves the FizzBuzz problem.for i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)"}]}
{"id": "task_15", "instruction": "Write a Python script that creates a simple CLI todo list where you can add, view, and delete tasks.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that creates a simple CLI todo list where you can add, view, and delete tasks."}]}
{"id": "task_16", "instruction": "Explain the following Python script which creates a simple CLI todo list.", "instances": [{"input": "todos = []\n\nwhile True:\n    print('1. View tasks\\n2. Add task\\n3. Delete task\\n4. Quit')\n    choice = int(input('Choose an option: '))\n    \n    if choice == 1:\n        for i, task in enumerate(todos, start=1):\n            print(f'{i}. {task}')\n    elif choice == 2:\n        task = input('Enter a task: ')\n        todos.append(task)\n    elif choice == 3:\n        task_num = int(input('Enter task number to delete: '))\n        del todos[task_num - 1]\n    elif choice == 4:\n        break\n    else:\n        print('Invalid choice, please choose again.')", "output": "", "replit_code_output": "Explain the following Python script which creates a simple CLI todo list.todos = []\n\nwhile True:\n    print('1. View tasks\\n2. Add task\\n3. Delete task\\n4. Quit')\n    choice = int(input('Choose an option: '))\n    \n    if choice == 1:\n        for i, task in enumerate(todos, start=1):\n            print(f'{i}. {task}')\n    elif choice == 2:\n        task = input('Enter a task: ')\n        todos.append(task)\n    elif choice == 3:\n        task_num = int(input('Enter task number to delete: '))\n        del todos[task_num - 1]\n    elif choice == 4:\n        break\n    else:\n        print('Invalid choice, please choose again.')"}]}
{"id": "task_17", "instruction": "Write a Python script that uses a generator to generate the Fibonacci sequence.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that uses a generator to generate the Fibonacci sequence. \n\ndef fibonacci_generator():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfibonacci_sequence = fibonacci_generator()\nfor n in range(10):\n    print(next(fibonacci_sequence))"}]}
{"id": "task_18", "instruction": "Explain the following Python script which uses a generator to generate the Fibonacci sequence.", "instances": [{"input": "def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nf = fibonacci()\nfor i in range(10):\n    print(next(f))", "output": "", "replit_code_output": "Explain the following Python script which uses a generator to generate the Fibonacci sequence.def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nf = fibonacci()\nfor i in range(10):\n    print(next(f))"}]}
{"id": "task_19", "instruction": "Write a Python script that implements a simple Caesar cipher.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that implements a simple Caesar cipher. The cipher works by taking a string and a shift amount, and then encrypting the string by adding the shift amount to each character. The cipher then outputs the encrypted string."}]}
{"id": "task_20", "instruction": "Explain the following Python script which implements a simple Caesar cipher.", "instances": [{"input": "import string\n\ndef caesar_cipher(text, shift):\n    alphabets = string.ascii_lowercase + string.ascii_uppercase\n    shifted = string.ascii_lowercase[shift:] + string.ascii_lowercase[:shift] + string.ascii_uppercase[shift:] + string.ascii_uppercase[:shift]\n    table = str.maketrans(alphabets, shifted)\n    return text.translate(table)\n\ntext = 'Hello, world!'\nshift = 2\nprint(caesar_cipher(text, shift))  # Jgnnq, yqtnf!", "output": "", "replit_code_output": "Explain the following Python script which implements a simple Caesar cipher.import string\n\ndef caesar_cipher(text, shift):\n    alphabets = string.ascii_lowercase + string.ascii_uppercase\n    shifted = string.ascii_lowercase[shift:] + string.ascii_lowercase[:shift] + string.ascii_uppercase[shift:] + string.ascii_uppercase[:shift]\n    table = str.maketrans(alphabets, shifted)\n    return text.translate(table)\n\ntext = 'Hello, world!'\nshift = 2\nprint(caesar_cipher(text, shift))  # Jgnnq, yqtnf!"}]}
{"id": "task_21", "instruction": "Find optimizations / refactoring for the following Python script that calculates factorial.", "instances": [{"input": "def factorial(n):\n    if n < 0:\n        return 'Must be a non-negative integer.'\n    elif isinstance(n, float):\n        return 'Must be an integer.'\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        i = 1\n        while i <= n:\n            result = result * i\n            i = i + 1\n        return result\n\nprint(factorial(5))", "output": "", "replit_code_output": "Find optimizations / refactoring for the following Python script that calculates factorial.def factorial(n):\n    if n < 0:\n        return 'Must be a non-negative integer.'\n    elif isinstance(n, float):\n        return 'Must be an integer.'\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        i = 1\n        while i <= n:\n            result = result * i\n            i = i + 1\n        return result\n\nprint(factorial(5))"}]}
{"id": "task_22", "instruction": "Find optimizations / refactoring for the following Python script that checks if a list has duplicate elements.", "instances": [{"input": "def has_duplicates(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n    return False\n\nprint(has_duplicates([1, 2, 3, 4, 1]))", "output": "", "replit_code_output": "Find optimizations / refactoring for the following Python script that checks if a list has duplicate elements.def has_duplicates(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n    return False\n\nprint(has_duplicates([1, 2, 3, 4, 1])) # Output: True"}]}
{"id": "task_23", "instruction": "Find optimizations / refactoring for the following Python script that finds common elements in two lists.", "instances": [{"input": "def common_elements(lst1, lst2):\n    common = []\n    for i in lst1:\n        if i in lst2:\n            common.append(i)\n    return common\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))", "output": "", "replit_code_output": "Find optimizations / refactoring for the following Python script that finds common elements in two lists.def common_elements(lst1, lst2):\n    common = []\n    for i in lst1:\n        if i in lst2:\n            common.append(i)\n    return common\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))"}]}
{"id": "task_24", "instruction": "Find optimizations / refactoring for the following Python script that concatenates a list of strings.", "instances": [{"input": "def concatenate_strings(strings):\n    result = ''\n    for string in strings:\n        result += string\n    return result\n\nprint(concatenate_strings(['Hello', ' ', 'World', '!']))", "output": "", "replit_code_output": "Find optimizations / refactoring for the following Python script that concatenates a list of strings.def concatenate_strings(strings):\n    result = ''\n    for string in strings:\n        result += string\n    return result\n\nprint(concatenate_strings(['Hello', ' ', 'World', '!']))"}]}
{"id": "task_25", "instruction": "Find optimizations / refactoring for the following Python script that calculates the product of all numbers in a list.", "instances": [{"input": "def product(numbers):\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n\nprint(product([1, 2, 3, 4, 5]))", "output": "", "replit_code_output": "Find optimizations / refactoring for the following Python script that calculates the product of all numbers in a list.def product(numbers):\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n\nprint(product([1, 2, 3, 4, 5]))"}]}
{"id": "task_26", "instruction": "Write a Python script using FastAPI to create a basic 'Hello World' API.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using FastAPI to create a basic 'Hello World' API."}]}
{"id": "task_27", "instruction": "Explain the following Python script using FastAPI to create a basic 'Hello World' API.", "instances": [{"input": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}", "output": "", "replit_code_output": "Explain the following Python script using FastAPI to create a basic 'Hello World' API.from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}"}]}
{"id": "task_28", "instruction": "Write a Python script using FastAPI that utilizes path and query parameters.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using FastAPI that utilizes path and query parameters.\n\nimport fastapi\n\napp = fastapi.FastAPI()\n\n@app.get(\"/path-params/{param1}/{param2}\")\ndef path_params(param1: str, param2: str):\n    return {\"param1\": param1, \"param2\": param2}"}]}
{"id": "task_29", "instruction": "Explain the following Python script using FastAPI that utilizes path and query parameters.", "instances": [{"input": "@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}", "output": "", "replit_code_output": "Explain the following Python script using FastAPI that utilizes path and query parameters.@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}"}]}
{"id": "task_30", "instruction": "Write a Python script using FastAPI that includes a request body and a response model.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using FastAPI that includes a request body and a response model. The script should include a route handler that accepts the request body and returns a response model."}]}
{"id": "task_31", "instruction": "Explain the following Python script using FastAPI that includes a request body and a response model.", "instances": [{"input": "from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    is_offer: bool = None\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item", "output": "", "replit_code_output": "Explain the following Python script using FastAPI that includes a request body and a response model.from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    is_offer: bool = None\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"}]}
{"id": "task_32", "instruction": "Write a Python script using FastAPI that includes path parameters with types, query parameters, and dependencies.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using FastAPI that includes path parameters with types, query parameters, and dependencies."}]}
{"id": "task_33", "instruction": "Explain the following Python script using FastAPI that includes path parameters with types, query parameters, and dependencies.", "instances": [{"input": "from fastapi import Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.get(\"/items/{item_id}\", response_model=schemas.Item)\ndef read_item(item_id: int, db: Session = Depends(get_db)):\n    db_item = crud.get_item(db, item_id=item_id)\n    if db_item is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return db_item", "output": "", "replit_code_output": "Explain the following Python script using FastAPI that includes path parameters with types, query parameters, and dependencies.from fastapi import Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.get(\"/items/{item_id}\", response_model=schemas.Item)\ndef read_item(item_id: int, db: Session = Depends(get_db)):\n    db_item = crud.get_item(db, item_id=item_id)\n    if db_item is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return db_item\n\n@app.post(\"/items/\", response_model=schemas.Item)\ndef create_item(item: schemas"}]}
{"id": "task_34", "instruction": "Write a Python script using FastAPI that integrates OAuth2 authentication and authorization.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using FastAPI that integrates OAuth2 authentication and authorization."}]}
{"id": "task_35", "instruction": "Explain the following Python script using FastAPI that integrates OAuth2 authentication and authorization.", "instances": [{"input": "from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom datetime import datetime, timedelta\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\ndef fake_decode_token(token):\n    return TokenData(username=token + \"fakedecoded\")\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    return token_data\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: str = Depends(get_current_user)):\n    return {\"username\": current_user.username}", "output": "", "replit_code_output": "Explain the following Python script using FastAPI that integrates OAuth2 authentication and authorization.from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom datetime import datetime, timedelta\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\ndef fake_decode_token(token):\n    return TokenData(username=token + \"fakedecoded\")\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    return token_data\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: str = Depends(get_current_user)):\n    return {\"username\": current_user.username}"}]}
{"id": "task_36", "instruction": "Write a Python script that installs the transformers library and loads a pretrained BERT model and tokenizer.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script that installs the transformers library and loads a pretrained BERT model and tokenizer."}]}
{"id": "task_37", "instruction": "Explain the following Python script that installs the transformers library and loads a pretrained BERT model and tokenizer.", "instances": [{"input": "# Install the Transformers library\n!pip install transformers\n\n# Import the necessary library\nfrom transformers import AutoModel, AutoTokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\nmodel = AutoModel.from_pretrained('bert-base-uncased')", "output": "", "replit_code_output": "Explain the following Python script that installs the transformers library and loads a pretrained BERT model and tokenizer.# Install the Transformers library\n!pip install transformers\n\n# Import the necessary library\nfrom transformers import AutoModel, AutoTokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\nmodel = AutoModel.from_pretrained('bert-base-uncased')"}]}
{"id": "task_38", "instruction": "Write a Python script using transformers that tokenizes an input text and generates model output.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using transformers that tokenizes an input text and generates model output."}]}
{"id": "task_39", "instruction": "Explain the following Python script using transformers that tokenizes an input text and generates model output.", "instances": [{"input": "# Import the necessary library\nfrom transformers import AutoModel, AutoTokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\nmodel = AutoModel.from_pretrained('bert-base-uncased')\n\n# Tokenize some input text\ninput_text = \"Hello, world! This is a test input for BERT.\"\ninput_tokens = tokenizer.encode(input_text, return_tensors='pt')\n\n# Generate model output\noutput = model(input_tokens)", "output": "", "replit_code_output": "Explain the following Python script using transformers that tokenizes an input text and generates model output.# Import the necessary library\nfrom transformers import AutoModel, AutoTokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\nmodel = AutoModel.from_pretrained('bert-base-uncased')\n\n# Tokenize some input text\ninput_text = \"Hello, world! This is a test input for BERT.\"\ninput_tokens = tokenizer.encode(input_text, return_tensors='pt')\n\n# Generate model output\noutput = model(input_tokens)\n\n# Print the output\nprint(output)"}]}
{"id": "task_40", "instruction": "Write a Python script using transformers that fine-tunes a model for a classification task.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using transformers that fine-tunes a model for a classification task."}]}
{"id": "task_41", "instruction": "Explain the following Python script using transformers that fine-tunes a model for a classification task.", "instances": [{"input": "# Import the necessary libraries\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments\n\n# Load a pretrained model\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Define the training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    num_train_epochs=3,\n    per_device_train_batch_size=16,\n    per_device_eval_batch_size=64,\n    warmup_steps=500,\n    weight_decay=0.01,\n)\n\n# Initialize the Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n)\n\n# Train the model\ntrainer.train()", "output": "", "replit_code_output": "Explain the following Python script using transformers that fine-tunes a model for a classification task.# Import the necessary libraries\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments\n\n# Load a pretrained model\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Define the training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    num_train_epochs=3,\n    per_device_train_batch_size=16,\n    per_device_eval_batch_size=64,\n    warmup_steps=500,\n    weight_decay=0.01,\n)\n\n# Initialize the Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n)\n\n# Train the model\ntrainer.train()"}]}
{"id": "task_42", "instruction": "Write a Python script using transformers that trains a model with a custom dataset.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using transformers that trains a model with a custom dataset."}]}
{"id": "task_43", "instruction": "Explain the following Python script using transformers that trains a model with a custom dataset.", "instances": [{"input": "# Import the necessary libraries\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments, Dataset\n\n# Define a custom Dataset\nclass CustomDataset(Dataset):\n    def __init__(self, encodings, labels):\n        self.encodings = encodings\n        self.labels = labels\n\n    def __getitem__(self, idx):\n        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n        item['labels'] = torch.tensor(self.labels[idx])\n        return item\n\n    def __len__(self):\n        return len(self.labels)\n\n# Load a pretrained model\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Define the training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    num_train_epochs=3,\n    per_device_train_batch_size=16,\n    per_device_eval_batch_size=64,\n    warmup_steps=500,\n    weight_decay=0.01,\n)\n\n# Initialize the Trainer with the custom Dataset\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=CustomDataset(train_encodings, train_labels),\n    eval_dataset=CustomDataset(val_encodings, val_labels)\n)\n\n# Train the model\ntrainer.train()", "output": "", "replit_code_output": "Explain the following Python script using transformers that trains a model with a custom dataset.# Import the necessary libraries\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments, Dataset\n\n# Define a custom Dataset\nclass CustomDataset(Dataset):\n    def __init__(self, encodings, labels):\n        self.encodings = encodings\n        self.labels = labels\n\n    def __getitem__(self, idx):\n        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n        item['labels'] = torch.tensor(self.labels[idx])\n        return item\n\n    def __len__(self):\n        return len(self.labels)\n\n# Load a pretrained model\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\n# Define the training arguments\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    num_train_epochs=3,\n    per_device_train_batch_size=16,\n    per_device_eval_batch_size=64,\n    warmup_steps=500,\n    weight_decay=0.01,\n)\n\n# Initialize the Trainer with the custom Dataset\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=CustomDataset(train_encodings, train_labels),\n    eval_dataset=CustomDataset(val_encodings, val_labels)\n)\n\n# Train the model\ntrainer.train()"}]}
{"id": "task_44", "instruction": "Write a Python script using transformers that uses a pretrained model for text generation.", "instances": [{"input": "", "output": "", "replit_code_output": "Write a Python script using transformers that uses a pretrained model for text generation."}]}
{"id": "task_45", "instruction": "Explain the following Python script using transformers that uses a pretrained model for text generation.", "instances": [{"input": "# Import the necessary library\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n\n# Define a prompt\nprompt = \"In a world where AI is ubiquitous,\"\n\n# Encode the prompt\ninputs = tokenizer.encode(prompt, return_tensors='pt')\n\n# Generate a sequence\noutput = model.generate(inputs, max_length=100, temperature=0.7, do_sample=True)\n\n# Decode the generated sequence\nprint(tokenizer.decode(output[0], skip_special_tokens=True))", "output": "", "replit_code_output": "Explain the following Python script using transformers that uses a pretrained model for text generation.# Import the necessary library\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\n# Load a pretrained model and tokenizer\ntokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n\n# Define a prompt\nprompt = \"In a world where AI is ubiquitous,\"\n\n# Encode the prompt\ninputs = tokenizer.encode(prompt, return_tensors='pt')\n\n# Generate a sequence\noutput = model.generate(inputs, max_length=100, temperature=0.7, do_sample=True)\n\n# Decode the generated sequence\nprint(tokenizer.decode(output[0], skip_special_tokens=True))"}]}
