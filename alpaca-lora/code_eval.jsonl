{"id":"task_1", "instruction":"Write a Python script that uses a for loop to print numbers 1 to 10.", "instances":[{"input":"", "output":""}]}
{"id":"task_2", "instruction":"Implement a while loop that asks for user input and keeps looping until the user types 'stop'.", "instances":[{"input":"", "output":""}]}
{"id":"task_3", "instruction":"Write a Python function that takes two integers as arguments, and returns 'equal' if they are equal, 'greater' if the first is greater, and 'lesser' if the second is greater.", "instances":[{"input":"", "output":""}]}
{"id":"task_4", "instruction":"Write a Python generator that generates Fibonacci numbers.", "instances":[{"input":"", "output":""}]}
{"id":"task_5", "instruction":"Explain the difference between an iterator and a generator in Python. Provide examples.", "instances":[{"input":"", "output":""}]}
{"id":"task_6", "instruction":"Write a Python function that takes a list of numbers as an argument and returns a list of the squares of those numbers.", "instances":[{"input":"", "output":""}]}
{"id":"task_7", "instruction":"Given a list a = [1, 2, 3, 4, 5], write a Python script to reverse this list without using the built-in reverse() function.", "instances":[{"input":"", "output":""}]}
{"id":"task_8", "instruction":"Given a dictionary d = {'a': 1, 'b': 2, 'c': 3}, write a Python script to swap keys and values in the dictionary (result should be {1: 'a', 2: 'b', 3: 'c'}).", "instances":[{"input":"", "output":""}]}
{"id":"task_9", "instruction":"Write a Python script that takes two sets s1 and s2 and prints their intersection, union, and difference.", "instances":[{"input":"", "output":""}]}
{"id":"task_10", "instruction":"Write a Python function that accepts a list of words, and returns a dictionary where keys are the words and values are the frequencies of the words in the list. Use a for loop, if clause, and dictionary in your solution.", "instances":[{"input":"", "output":""}]}
{"id": "task_11", "instruction": "Write a Python script that counts the frequency of each word in a text", "instances" : [{"input":"", "output":""}]}
{"id":"task_12", "instruction": "Explain the following Python script which counts the frequency of words in a text.", "instances": [{"input":"def word_frequency(text):\n    words = text.split()\n    frequency_dict = {}\n    for word in words:\n        if word not in frequency_dict:\n            frequency_dict[word] = 0\n        frequency_dict[word] += 1\n    for word, frequency in frequency_dict.items():\n        print(f'{word}: {frequency}')\n\ntext = 'Hello world! This is a simple simple test text text for the word frequency function.'\nword_frequency(text)", "output":""}]}
{"id":"task_13", "instruction":"Write a Python script that solves the FizzBuzz problem.", "instances":[{"input":"", "output":""}]}
{"id":"task_14", "instruction":"Explain the following Python script which solves the FizzBuzz problem.", "instances":[{"input":"for i in range(1, 101):\n    if i % 3 == 0 and i % 5 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)", "output":""}]}
{"id":"task_15", "instruction":"Write a Python script that creates a simple CLI todo list where you can add, view, and delete tasks.", "instances":[{"input":"", "output":""}]}
{"id":"task_16", "instruction":"Explain the following Python script which creates a simple CLI todo list.", "instances":[{"input":"todos = []\n\nwhile True:\n    print('1. View tasks\\n2. Add task\\n3. Delete task\\n4. Quit')\n    choice = int(input('Choose an option: '))\n    \n    if choice == 1:\n        for i, task in enumerate(todos, start=1):\n            print(f'{i}. {task}')\n    elif choice == 2:\n        task = input('Enter a task: ')\n        todos.append(task)\n    elif choice == 3:\n        task_num = int(input('Enter task number to delete: '))\n        del todos[task_num - 1]\n    elif choice == 4:\n        break\n    else:\n        print('Invalid choice, please choose again.')", "output":""}]}
{"id":"task_17", "instruction":"Write a Python script that uses a generator to generate the Fibonacci sequence.", "instances":[{"input":"", "output":""}]}
{"id":"task_18", "instruction":"Explain the following Python script which uses a generator to generate the Fibonacci sequence.", "instances":[{"input":"def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nf = fibonacci()\nfor i in range(10):\n    print(next(f))", "output":""}]}
{"id":"task_19", "instruction":"Write a Python script that implements a simple Caesar cipher.", "instances":[{"input":"", "output":""}]}
{"id":"task_20", "instruction":"Explain the following Python script which implements a simple Caesar cipher.", "instances":[{"input":"import string\n\ndef caesar_cipher(text, shift):\n    alphabets = string.ascii_lowercase + string.ascii_uppercase\n    shifted = string.ascii_lowercase[shift:] + string.ascii_lowercase[:shift] + string.ascii_uppercase[shift:] + string.ascii_uppercase[:shift]\n    table = str.maketrans(alphabets, shifted)\n    return text.translate(table)\n\ntext = 'Hello, world!'\nshift = 2\nprint(caesar_cipher(text, shift))  # Jgnnq, yqtnf!", "output":""}]}
{"id":"task_21", "instruction":"Find optimizations / refactoring for the following Python script that calculates factorial.", "instances":[{"input":"def factorial(n):\n    if n < 0:\n        return 'Must be a non-negative integer.'\n    elif isinstance(n, float):\n        return 'Must be an integer.'\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        i = 1\n        while i <= n:\n            result = result * i\n            i = i + 1\n        return result\n\nprint(factorial(5))", "output":""}]}
{"id":"task_22", "instruction":"Find optimizations / refactoring for the following Python script that checks if a list has duplicate elements.", "instances":[{"input":"def has_duplicates(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n    return False\n\nprint(has_duplicates([1, 2, 3, 4, 1]))", "output":""}]}
{"id":"task_23", "instruction":"Find optimizations / refactoring for the following Python script that finds common elements in two lists.", "instances":[{"input":"def common_elements(lst1, lst2):\n    common = []\n    for i in lst1:\n        if i in lst2:\n            common.append(i)\n    return common\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))", "output":""}]}
{"id":"task_24", "instruction":"Find optimizations / refactoring for the following Python script that concatenates a list of strings.", "instances":[{"input":"def concatenate_strings(strings):\n    result = ''\n    for string in strings:\n        result += string\n    return result\n\nprint(concatenate_strings(['Hello', ' ', 'World', '!']))", "output":""}]}
{"id":"task_25", "instruction":"Find optimizations / refactoring for the following Python script that calculates the product of all numbers in a list.", "instances":[{"input":"def product(numbers):\n    result = 1\n    for i in range(len(numbers)):\n        result *= numbers[i]\n    return result\n\nprint(product([1, 2, 3, 4, 5]))", "output":""}]}
